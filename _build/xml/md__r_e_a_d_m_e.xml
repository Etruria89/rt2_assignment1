<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>Research Track 2 - assignment 1</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="normal">rt2_assignment1/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>action/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>action<sp/>files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Control2_1.action<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>action<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>launch/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>launch<sp/>files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sim.launch<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>simulation<sp/>launch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scripts/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>python<sp/>scripts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>go_to_point.py<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>pyhton<sp/>script<sp/>controlling<sp/>the<sp/>robot</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>user_interface.py<sp/><sp/><sp/><sp/><sp/>-<sp/>command<sp/>line<sp/>user<sp/>interface</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>src/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>C++<sp/>source<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>position_service.cpp<sp/><sp/>-<sp/>random<sp/>position<sp/>service</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>state_machine.cpp<sp/><sp/><sp/><sp/><sp/>-<sp/>finite<sp/>state<sp/>machine</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>srv/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>custom<sp/>services</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Command.srv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>user<sp/>interface<sp/>service</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RandomPosition.srv<sp/><sp/><sp/><sp/>-<sp/>random<sp/>position<sp/>service</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>urdf/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>robot<sp/>description<sp/>for<sp/>Gazebo<sp/>simulation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>my_robot.urdf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>robot<sp/>description</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CMakeLists.txt<sp/><sp/>-<sp/>CMake<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>package.xml<sp/><sp/><sp/><sp/><sp/>-<sp/>manifest</highlight></codeline>
</programlisting></para>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md1">
<title>Package</title>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md2">
<title>Package Description</title>
<para>This package controls a mobile non-holonomic robot via the &apos;go_to_point&apos; behaviour. More in detail, a random goal poses is generated and the robot aligns itself towards that point. The robot, then, sets its linear speed to drive to that position and, once that goal position is reached it turns itslef to match requested orientation. Unless the robot is stopped by the used the process continues to loop by generating a new target destination and pose. In this specific case, due to the fasct that the robot &apos;go_to_point&apos; behaviour is here implemented as an action it can be preempted, stoppinng the robot at any time and then restarting it when issuing a new goal.</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md3">
<title>Nodes structure and explanation</title>
<para>Here below is reported the structure of this robot motion control algorithm:</para>
<para><image type="html" name="rt2_action.png" inline="yes"></image>
</para>
<para>More in detail, two nodes are implemented as python scripts<itemizedlist>
<listitem><para><bold>go_to_point</bold>: (<emphasis>go_to_point.py</emphasis>) the action server managing the robot speed control depending on the goal received. This node publishes on the topics /cmd_vel the velocity of the robot and read its position by subscribing the topic &apos;/odom&apos;</para>
</listitem><listitem><para><bold>userinterface</bold>: (*.user_interfacepy*) the command line user interface, which sends the requests to start and stop the go_to_point behaviour.</para>
</listitem></itemizedlist>
</para>
<para>While other two nodes have been implemented in C++:<itemizedlist>
<listitem><para><bold>positionServer</bold>: (<emphasis>position_serivice.cpp</emphasis>) the server node generating a random pose once requested.</para>
</listitem><listitem><para><bold>stateMachine</bold>: (<emphasis>state_machine.cpp</emphasis>) the finite state machine managing the request of a new goal pose when needed, sending it as a goal to &apos;go_to_point&apos; action server.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md4">
<title>Compiling and Running</title>
<para>Compilation can be carried out sourcing the ROS Noetic path and typing:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">path/to/ros_ws/$<sp/>catkin_make</highlight></codeline>
</programlisting></para>
<para>A launch file has been provided to generate the Gazebo simulation and run all the nodes required for the control of the non-holonomic robot:<itemizedlist>
<listitem><para><bold>sim.launch</bold>: to be used in order to launch all the nodes and the Gazebo simulation. <programlisting filename=".bash"><codeline><highlight class="normal">path/to/ros_ws/$<sp/>roslaunch<sp/>rt2_assignment1<sp/>sim.launch</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para>In this case the Gazebo simulation will automatically start.</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md5">
<title>Requirements</title>
<para><bold>Gazebo</bold> is required to run the first launch file (the scene definition is presented in this package). </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
